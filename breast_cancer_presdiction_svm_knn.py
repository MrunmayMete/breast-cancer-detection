# -*- coding: utf-8 -*-
"""Breast_Cancer_Presdiction_SVM/KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fT4P8tVWcXTpNbyiSgmO8xigK2p693ea
"""

import sys 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing, model_selection
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.metrics import classification_report, accuracy_score
from pandas.plotting import scatter_matrix

#loading the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"
names = ['id','clump_thickness','univorm_cell_size','uniform_cell_shape','marginal_adhesion','single_epithelial_size','bare_nuclei','bland_chromatin','normal_nucleoli','mitosis','class']
df = pd.read_csv(url, names=names)

#preprocessing the data
df.replace('?', -99999, inplace=True)
print(df.axes)

#print the shape of the dataset
print(df.shape)

#do dataset visualization
print(df.loc[:0])

print(df.describe)

#plot histogram for each variable
df.hist(figsize = (18, 18))
plt.show()

#create scatter plot matrix
scatter_matrix(df, figsize=(18, 18))
plt.show()

# Creat X and Y dataset for training
x = np.array(df.drop(['class'],1))
y = np.array(df['class'])

x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y,test_size = 0.5)

#specify testing options
 seed = 8
 scoring = 'accuracy'

#define the models to train
models = []
models.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))
models.append(('SVM', SVC()))

#evaluate each models in turn
results = []
names = []
for name , model in models:
  kfold = model_selection.KFold(n_splits=10,shuffle=True, random_state=seed)
  cv_results = model_selection.cross_val_score(model, x_train, y_train, cv=kfold, scoring=scoring)
  results.append(cv_results)
  names.append(name)
  msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
  print(msg)

#make predicitons on validation dataset

for name, model in models:
  model.fit(x_train, y_train)
  predictions = model.predict(x_test)
  print(name)
  print(accuracy_score(y_test, predictions))
  print(classification_report(y_test, predictions))

clf = SVC() 

clf.fit(x_train, y_train)
accuracy = clf.score(x_test, y_test)
print(accuracy)

example = np.array([[4,3,1,1,1,2,3,4,1,2]])
example = example.reshape(len(example), -1)
prediction = clf.predict(example)
print(prediction)

